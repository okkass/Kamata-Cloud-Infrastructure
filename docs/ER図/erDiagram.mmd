erDiagram

portfolios {
    bigint id PK
    binary(16) uuid
    bigint user_id FK
}

portfolio_articles {
    bigint id PK
    binary(16) uuid
    varchar(256) title
    bigint portfolio_id FK
}


users {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    varchar(256) email
    datetime created_at
    boolean is_admin
    datetime last_login_at
    int cpu_limit_cores "0 for unlimited"
    int memory_limit_mb "0 for unlimited"
    int storage_limit_gb "0 for unlimited"
}

user_credentials {
    bigint user_id PK, FK
    varchar(256) hashed_password
}

permissions {
    int id PK
    varchar name
}

roles {
    int id PK
    varchar(256) name
}

role_permissions {
    int role_id FK, PK
    int permission_id FK, PK
}

user_roles {
    bigint user_id FK, PK
    int role_id FK, PK
}

backups {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    text description
    datetime created_at
    int size
    bigint virtual_storage_id FK
}

snapshots {
    bigint id PK
    binary(16) uuid
    text description
    datetime created_at
    bigint target_virtual_machine_id FK
}

images {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    text description
    datetime created_at
    int size
}

instance_types {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    int cpu_core
    int memory_size
    is_template boolean ""
    datetime created_at
}

middlewares {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    datetime created_at
}

network_interfaces {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    varchar(15) ip_address
    varchar(15) mac_address
    bigint subnet_id FK
    bigint virtual_machine_id FK
}

physical_nodes {
    bigint id PK
    binary(16) uuid
    datetime created_at
    varchar(256) name
    varchar(15) ip_address
    boolean is_admin
}

security_groups {
    bigint id PK
    binary(16) uuid
    text description
    datetime created_at
}

security_rules {
    bigint id PK
    bigint security_group_id FK
    binary(16) uuid
    varchar(256) name
    varchar role_type "enum('inbound', 'outbound')"
    int port
    varchar rule_protocol "enum('tcp', 'udp', 'icmp', 'any')"
    varchar(15) target_ip
    varchar action "enum('allow', 'deny')"
    datetime created_at
}



storage_pools {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    varchar type "enum('local', 'network')"
    datetime created_at
    bigint total_size
}

virtual_storages {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    bigint size
    bigint storage_pool_id FK
}

attached_storages {
    bigint id PK
    bigint virtual_storage_id FK
    varchar(255) path
}

virtual_machine_attached_storage {
        bigint virtual_machine_id FK, PK
        bigint virtual_storage_id FK, PK
}

virtual_networks {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    varchar(15) cidr
    datetime created_at
}

subnets {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    varchar(15) cidr
    datetime created_at
    bigint virtual_network_id FK
}

virtual_machine_security_groups {
        bigint virtual_machine_id FK, PK
        bigint security_group_id FK, PK
}

virtual_machines {
    bigint id PK
    binary(16) uuid
    varchar(256) name
    varchar status "enum('running', 'stopped', 'suspended')"
    bigint physical_node_id FK
    bigint image_id FK
    bigint instance_type_id FK
    bigint user_id FK
    datetime created_at
}

physical_nodes ||--o{ virtual_machines : "has many"

images ||--o{ virtual_machines : "has"
instance_types ||--o{ virtual_machines : "has"

virtual_machines }o--o{ virtual_machine_attached_storage : "attaches"
virtual_storages }o--o{ virtual_machine_attached_storage : "is attached to"
virtual_storages ||--o{ backups : "has many"
virtual_storages ||--o{ attached_storages : "has many"
storage_pools ||--o{ virtual_storages : "many"

%% virtual_machine_attached_nic {
%%     bigint virtual_machine_id FK, PK
%%     bigint network_interface_id FK, PK
%% }
subnets ||--o{ network_interfaces : "belongs to"
virtual_machines ||--o{ network_interfaces : "has"
virtual_networks ||--o{ subnets : "many"

security_groups ||--o{ security_rules : "many"
virtual_machines }o--o{ virtual_machine_security_groups : "applies"
security_groups }o--o{ virtual_machine_security_groups : "is applied to"

users ||--o{ portfolios : "owns"
portfolios ||--o{ portfolio_articles : "contains"
users |o--|| user_credentials : "has"
users }o--o{ user_roles : "has"
roles }o--o{ user_roles : "is assigned to"
roles }o--o{ role_permissions : "has"
permissions }o--o{ role_permissions : "is granted to"